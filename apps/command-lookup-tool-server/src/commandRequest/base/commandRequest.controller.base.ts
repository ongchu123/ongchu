/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommandRequestService } from "../commandRequest.service";
import { CommandRequestCreateInput } from "./CommandRequestCreateInput";
import { CommandRequest } from "./CommandRequest";
import { CommandRequestFindManyArgs } from "./CommandRequestFindManyArgs";
import { CommandRequestWhereUniqueInput } from "./CommandRequestWhereUniqueInput";
import { CommandRequestUpdateInput } from "./CommandRequestUpdateInput";

export class CommandRequestControllerBase {
  constructor(protected readonly service: CommandRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommandRequest })
  async createCommandRequest(
    @common.Body() data: CommandRequestCreateInput
  ): Promise<CommandRequest> {
    return await this.service.createCommandRequest({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommandRequest] })
  @ApiNestedQuery(CommandRequestFindManyArgs)
  async commandRequests(
    @common.Req() request: Request
  ): Promise<CommandRequest[]> {
    const args = plainToClass(CommandRequestFindManyArgs, request.query);
    return this.service.commandRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommandRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commandRequest(
    @common.Param() params: CommandRequestWhereUniqueInput
  ): Promise<CommandRequest | null> {
    const result = await this.service.commandRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommandRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommandRequest(
    @common.Param() params: CommandRequestWhereUniqueInput,
    @common.Body() data: CommandRequestUpdateInput
  ): Promise<CommandRequest | null> {
    try {
      return await this.service.updateCommandRequest({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommandRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommandRequest(
    @common.Param() params: CommandRequestWhereUniqueInput
  ): Promise<CommandRequest | null> {
    try {
      return await this.service.deleteCommandRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
