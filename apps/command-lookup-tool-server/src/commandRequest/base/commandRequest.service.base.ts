/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CommandRequest as PrismaCommandRequest } from "@prisma/client";

export class CommandRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommandRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.commandRequest.count(args);
  }

  async commandRequests<T extends Prisma.CommandRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandRequestFindManyArgs>
  ): Promise<PrismaCommandRequest[]> {
    return this.prisma.commandRequest.findMany<Prisma.CommandRequestFindManyArgs>(
      args
    );
  }
  async commandRequest<T extends Prisma.CommandRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandRequestFindUniqueArgs>
  ): Promise<PrismaCommandRequest | null> {
    return this.prisma.commandRequest.findUnique(args);
  }
  async createCommandRequest<T extends Prisma.CommandRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandRequestCreateArgs>
  ): Promise<PrismaCommandRequest> {
    return this.prisma.commandRequest.create<T>(args);
  }
  async updateCommandRequest<T extends Prisma.CommandRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandRequestUpdateArgs>
  ): Promise<PrismaCommandRequest> {
    return this.prisma.commandRequest.update<T>(args);
  }
  async deleteCommandRequest<T extends Prisma.CommandRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandRequestDeleteArgs>
  ): Promise<PrismaCommandRequest> {
    return this.prisma.commandRequest.delete(args);
  }
}
